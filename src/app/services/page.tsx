"use client";

import { useState, useMemo } from "react";
import "./services.css";

const servicesData = [
    { id: 1, title: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è", description: "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è", price: 1200, image: "/images/engine.png", category: "–î–≤–∏–≥–∞—Ç–µ–ª—å", format: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", brand: "–ë–º–≤—à–∫–∞" },
    { id: 2, title: "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", description: "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞", price: 900, image: "/images/oil.png", category: "–î–≤–∏–≥–∞—Ç–µ–ª—å", format: "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û", brand: "–ú–µ—Ä—Å–µ–¥–µ—Å" },
    { id: 3, title: "–†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π", description: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏", price: 2500, image: "/images/suspension.png", category: "–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å", format: "–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", brand: "–ë–º–≤—à–∫–∞" },
    { id: 4, title: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏", description: "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", price: 1500, image: "/images/electrics.png", category: "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", format: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", brand: "–ë–µ–Ω—Ç–ª–∏" },
    { id: 5, title: "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û", description: "–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", price: 3000, image: "/images/to.png", category: "–¢–û", format: "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û", brand: "–ë–µ–Ω—Ç–ª–∏" },
    { id: 6, title: "–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–æ–≤", description: "–ó–∞–º–µ–Ω–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫ –∏ –¥–∏—Å–∫–æ–≤", price: 1800, image: "/images/brakes.png", category: "–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å", format: "–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", brand: "–ú–µ—Ä—Å–µ–¥–µ—Å" },
    { id: 7, title: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏", description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏", price: 1100, image: "/images/diagnostics.png", category: "–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å", format: "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", brand: "–ë–º–≤—à–∫–∞" },
    { id: 8, title: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", description: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ö—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", price: 4500, image: "/images/alarm.png", category: "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", format: "–î—Ä—É–≥–æ–µ", brand: "–ë–µ–Ω—Ç–ª–∏" },
    { id: 9, title: "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫—É–∑–æ–≤–∞", description: "–ü–æ–ª–Ω–∞—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞ –∞–≤—Ç–æ", price: 6000, image: "/images/paint.png", category: "–ö—É–∑–æ–≤", format: "–î—Ä—É–≥–æ–µ", brand: "–î—Ä—É–≥–æ–µ" },
    { id: 10, title: "–ú–æ–π–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è", description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è", price: 700, image: "/images/clean.png", category: "–î–≤–∏–≥–∞—Ç–µ–ª—å", format: "–î—Ä—É–≥–æ–µ", brand: "–î—Ä—É–≥–æ–µ" },
    { id: 11, title: "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", description: "–°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à–∏–Ω", price: 1300, image: "/images/tires.png", category: "–î–µ—Ç–µ–π–ª–∏–Ω–≥", format: "–î—Ä—É–≥–æ–µ", brand: "–ú–µ—Ä—Å–µ–¥–µ—Å" },
    { id: 12, title: "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ —Ñ–∞—Ä", description: "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏", price: 800, image: "/images/lights.png", category: "–î–µ—Ç–µ–π–ª–∏–Ω–≥", format: "–î—Ä—É–≥–æ–µ", brand: "–î—Ä—É–≥–æ–µ" },
];

const categories = ["–î–≤–∏–≥–∞—Ç–µ–ª—å", "–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–ö—É–∑–æ–≤", "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–î–µ—Ç–µ–π–ª–∏–Ω–≥", "–¢–û", "–î—Ä—É–≥–æ–µ"];
const formats = ["–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–î—Ä—É–≥–æ–µ"];
const brands = ["BMW", "Mercedes", "Bentley", "–î—Ä—É–≥–æ–µ"];

const ITEMS_PER_PAGE = 9;

export default function ServicesPage() {
    const [selectedCategory, setCategory] = useState("");
    const [selectedFormat, setFormat] = useState("");
    const [selectedBrand, setBrand] = useState("");
    const [search, setSearch] = useState("");
    const [sort, setSort] = useState("price");
    const [view, setView] = useState<"grid" | "list">("grid");
    const [currentPage, setCurrentPage] = useState(1);

    const filtered = useMemo(() => {
        let result = servicesData;
        if (search) result = result.filter(s => s.title.toLowerCase().includes(search.toLowerCase()));
        if (selectedCategory) result = result.filter(s => s.category === selectedCategory);
        if (selectedFormat) result = result.filter(s => s.format === selectedFormat);
        if (selectedBrand) result = result.filter(s => s.brand === selectedBrand);
        return [...result].sort((a, b) => a[sort as "price"] - b[sort as "price"]);
    }, [search, selectedCategory, selectedFormat, selectedBrand, sort]);

    const pageCount = Math.ceil(filtered.length / ITEMS_PER_PAGE);
    const currentItems = filtered.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);

    return (
        <div className="services-page">
            <aside className="filters">
                <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                <ul>{categories.map(c => (
                    <li key={c}>
                        <label>
                            <input
                                type="checkbox"
                                checked={selectedCategory === c}
                                onChange={() => setCategory(selectedCategory === c ? "" : c)}
                            /> {c}
                        </label>
                    </li>
                ))}</ul>

                <h3>–§–æ—Ä–º–∞—Ç</h3>
                <ul>{formats.map(f => (
                    <li key={f}>
                        <label>
                            <input
                                type="checkbox"
                                checked={selectedFormat === f}
                                onChange={() => setFormat(selectedFormat === f ? "" : f)}
                            /> {f}
                        </label>
                    </li>
                ))}</ul>

                <h3>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</h3>
                <ul>{brands.map(b => (
                    <li key={b}>
                        <label>
                            <input
                                type="checkbox"
                                checked={selectedBrand === b}
                                onChange={() => setBrand(selectedBrand === b ? "" : b)}
                            /> {b}
                        </label>
                    </li>
                ))}</ul>

                <button onClick={() => {
                    setCategory("");
                    setFormat("");
                    setBrand("");
                    setSearch("");
                    setCurrentPage(1);
                }}>–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
            </aside>

            <div className="content">
                <div className="tools">
                    <input placeholder="–ü–æ–∏—Å–∫" value={search} onChange={(e) => setSearch(e.target.value)} />
                    <select onChange={(e) => setSort(e.target.value)}>
                        <option value="price">–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤–ª–µ</option>
                        <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                    </select>
                    <div className="view-switch">
                        <button onClick={() => setView("grid")}>üî≤</button>
                        <button onClick={() => setView("list")}>üìÉ</button>
                    </div>
                </div>

                <div className={`cards ${view}`}>
                    {currentItems.map((s) => (
                        <div className="card" key={s.id}>
                            <img src={s.image} alt={s.title} />
                            <div className="info">
                                <h4>{s.title}</h4>
                                <p>{s.description}</p>
                                <b>{s.price} ‚ÇΩ</b>
                            </div>
                            <button className="add-to-cart">üõí</button>
                        </div>
                    ))}
                </div>

                {pageCount > 1 && (
                    <div className="pagination">
                        {Array.from({ length: pageCount }, (_, i) => (
                            <button
                                key={i + 1}
                                className={currentPage === i + 1 ? "active" : ""}
                                onClick={() => setCurrentPage(i + 1)}
                            >
                                {i + 1}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}
